[{"path":[]},{"path":"https://ccps-research-eval.github.io/soltools/CHANGELOG.html","id":"v013","dir":"","previous_headings":"","what":"v0.1.3","title":"Changelog","text":"Add support processing writing test extracts","code":""},{"path":"https://ccps-research-eval.github.io/soltools/CHANGELOG.html","id":"v012","dir":"","previous_headings":"","what":"v0.1.2","title":"Changelog","text":"Fix issue checks filter_exclusions()","code":""},{"path":"https://ccps-research-eval.github.io/soltools/CHANGELOG.html","id":"v011","dir":"","previous_headings":"","what":"v0.1.1","title":"Changelog","text":"Add drop_irw() function drop integrated reading writing tests Add drop_failing_retests() function. Export filter_exclusions() function Fix error filter_exclusions() function properly exclude recently arrived ELs failing Reading retests","code":""},{"path":"https://ccps-research-eval.github.io/soltools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 soltools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Ekholm. Author, maintainer.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ekholm E (2025). soltools: Tools Working Virginia SOL Data. R package version 0.1.3, https://github.com/ccps-research-eval/soltools.","code":"@Manual{,   title = {soltools: Tools for Working with Virginia SOL Data},   author = {Eric Ekholm},   year = {2025},   note = {R package version 0.1.3},   url = {https://github.com/ccps-research-eval/soltools}, }"},{"path":"https://ccps-research-eval.github.io/soltools/index.html","id":"soltools","dir":"","previous_headings":"","what":"Tools for Working with Virginia SOL Data","title":"Tools for Working with Virginia SOL Data","text":"soltools provides functionality ingesting working Virginia Standard Learning (SOL) data extracts Pearson. currently contains functions working non-writing student data extracts, functionality working extracts, student detail question (SDBQ) files, coming soon.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with Virginia SOL Data","text":"can install development version soltools GitHub :","code":"# install.packages(\"pak\") pak::pak(\"ccps-research-eval/soltools\")"},{"path":"https://ccps-research-eval.github.io/soltools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Working with Virginia SOL Data","text":"primary functionality soltools current version revolves around ingesting student data extracts calculating summary statistics. ingest student data extract Pearson, can simply run: ingesting extract, likely workflow involves recoding demographic variables (e.g. special education designation, race/ethnicity) human-readable values, filtering tests according rule (.e. selecting either student’s first best attempt per test taken), calculating summary statistics. cleaned dataframe, might want calculate pass rates. can using summarize_pass_rates() function, also allows us specify different grouping variables. can similarly calculate performance level (e.g. “Pass/Advanced,” “Pass/Proficient,” etc.)","code":"library(soltools)  my_extract <- ingest_student_data_extract(\"path/to/my/extract.csv\") extract_cleaned <- my_extract |>   drop_irw() |> # drops integrated reading and writing tests   filter_test_performance(\"best\") |> #retains each student's best attempt per test   recode_demographics() # see ?recode_demographics() for options, but the defaults should be acceptable test_pass_rates <- summarize_pass_rates(extract_cleaned, group_vars = \"test_name\") # get the pass rate for each test  sch_test_pass_rates <- summarize_pass_rates(extract_cleaned, group_vars = c(\"school_name\", \"test_name\")) # get the pass rate for each test by school test_performance_by_level <- summarize_performance_levels(extract_cleaned, group_vars = \"test_name\")  sch_test_performance_by_level <- summarize_performance_levels(extract_cleaned, group_vars = c(\"school_name\", \"test_name\"))"},{"path":"https://ccps-research-eval.github.io/soltools/index.html","id":"writing-extracts","dir":"","previous_headings":"Usage","what":"Writing Extracts","title":"Tools for Working with Virginia SOL Data","text":"Working writing extracts requires small changes. read writing student data extract, can simply set writing_extract = TRUE calling ingest_student_data_extract(). call standardize_writing_extract_names() function standardize column names writing extract ensure ’re non-writing extracts. point, process summarizing pass rates performance levels :","code":"wrtg_extract <- ingest_student_data_extract(\"path/to/my/writing_extract.csv\", writing_extract = TRUE) wrtg_extract <- standardize_writing_extract_names(wrtg_extract) wrtg_test_pass_rates <- wrtg_extract |>   filter_test_performance(\"best\") |> #note that the \"first\" test option does not currently work for writing extracts   recode_demographics() |>   summarize_pass_rates(group_vars = c(\"school_name\", \"test_name\"))"},{"path":"https://ccps-research-eval.github.io/soltools/reference/clean_test_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Test Names — clean_test_names","title":"Clean Test Names — clean_test_names","text":"Cleans test names removing standards year (e.g., \"(23)\") \" CAT\" string.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/clean_test_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Test Names — clean_test_names","text":"","code":"clean_test_names(x)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/clean_test_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Test Names — clean_test_names","text":"x character vector test names cleaned.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/clean_test_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Test Names — clean_test_names","text":"character vector cleaned test names.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/clean_test_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Test Names — clean_test_names","text":"","code":"if (FALSE) { # \\dontrun{ clean_test_names(c(\"Gr 4 Reading CAT\", \"EOC Reading (17)\", \"Gr 8 Math (16) CAT\")) # Returns: c(\"Gr 4 Reading\", \"EOC Reading\", \"Gr 8 Math\") } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_failing_retests.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Failing Retests — drop_failing_retests","title":"Drop Failing Retests — drop_failing_retests","text":"Filter student data extract remove failing retests alignment VDOE's steps calculate annual pass rates. function assumes retest status defined column named \"retest,\" \"Y\" indicates retest. also assumes performance levels defined column named \"performance_level.\"","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_failing_retests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Failing Retests — drop_failing_retests","text":"","code":"drop_failing_retests(x)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_failing_retests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Failing Retests — drop_failing_retests","text":"x dataframe, ideally one created ingest_student_data_extract()","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_failing_retests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Failing Retests — drop_failing_retests","text":"dataframe failing retests removed","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_failing_retests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Failing Retests — drop_failing_retests","text":"","code":"if (FALSE) { # \\dontrun{ df_no_fail_retest <- drop_failing_retests(my_data) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_irw.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Int Read Write Tests — drop_irw","title":"Drop Int Read Write Tests — drop_irw","text":"Filter student data extract remove integrated reading writing (IRW) tests. function assumes test names defined column named \"test_name.\"","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_irw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Int Read Write Tests — drop_irw","text":"","code":"drop_irw(x)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_irw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Int Read Write Tests — drop_irw","text":"x dataframe, ideally one created ingest_student_data_extract()","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_irw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Int Read Write Tests — drop_irw","text":"dataframe IRW tests removed","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/drop_irw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Int Read Write Tests — drop_irw","text":"","code":"if (FALSE) { # \\dontrun{ df_no_irw <- drop_irw(my_data) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_exclusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Exclusions — filter_exclusions","title":"Filter Exclusions — filter_exclusions","text":"function filters student data extract exclude certain records based several criteria, aligning VDOE's guidelines calculating annual pass rates.  Specifically, removes records : grade \"TT\" (non-enrolled student). performance level set allowed levels (1, 2, 3, 4, 5, 8). student recently arrived English learner (EL) taking reading test non-passing performance level (3, 4, 5). test parent-requested (drop_parent_requested TRUE). test failing retest (drop_failing_retests TRUE).","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_exclusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Exclusions — filter_exclusions","text":"","code":"filter_exclusions(x, drop_parent_requested = TRUE, drop_failing_retests = TRUE)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_exclusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Exclusions — filter_exclusions","text":"x data frame, ideally one created ingest_student_data_extract(), containing student test data. drop_parent_requested Logical. TRUE (default), exclude tests marked parent-requested. drop_failing_retests Logical. TRUE (default), exclude failing retests. See drop_failing_retests() details.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_exclusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Exclusions — filter_exclusions","text":"filtered data frame specified exclusions removed.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_test_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Test Performance — filter_test_performance","title":"Filter Test Performance — filter_test_performance","text":"Filter student data extract include students' 'best' 'first' SOL tests.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_test_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Test Performance — filter_test_performance","text":"","code":"filter_test_performance(x, type = \"best\")"},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_test_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Test Performance — filter_test_performance","text":"x dataframe, ideally one created ingest_student_data_extract() type Character. Either \"best\" (default) \"first.\" \"best\" retain student's best score given test, whereas \"first\" retain student's chronological first score given test. Note \"best\" option currently supported writing tests.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_test_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Test Performance — filter_test_performance","text":"dataframe 1 row per student per test","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/filter_test_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Test Performance — filter_test_performance","text":"","code":"if (FALSE) { # \\dontrun{ p <- \"path/to/my/data.csv\" df <- ingest_student_data_extract(p) best_tests <- filter_test_performance(df, type = \"best\") first_tests <- filter_test_performance(df, type = \"first\") } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/ingest_student_data_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingest Student Data Extract — ingest_student_data_extract","title":"Ingest Student Data Extract — ingest_student_data_extract","text":"Ingest SOL student data extract (csv file). exact file downloaded Pearson. function reads data performs light cleaning.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/ingest_student_data_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingest Student Data Extract — ingest_student_data_extract","text":"","code":"ingest_student_data_extract(   path,   clean_test_names = TRUE,   writing_extract = FALSE,   ... )"},{"path":"https://ccps-research-eval.github.io/soltools/reference/ingest_student_data_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingest Student Data Extract — ingest_student_data_extract","text":"path Character. path file ingested. clean_test_names Logical. TRUE (default), test names cleaned using clean_test_names(), strips standard year \" CAT\" suffix applicable. writing_extract Logical. TRUE, assume file student data extract writing tests. FALSE (default), assume file student data extract non-writing tests. ) ... Additional arguments passed readr::read_csv()","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/ingest_student_data_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingest Student Data Extract — ingest_student_data_extract","text":"dataframe containing ingested data.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/ingest_student_data_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ingest Student Data Extract — ingest_student_data_extract","text":"","code":"if (FALSE) { # \\dontrun{ p <- \"path/to/my/data.csv\" df <- ingest_student_data_extract(p) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_demographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Demographic Variables — recode_demographics","title":"Recode Demographic Variables — recode_demographics","text":"Recodes demographic variables (SPED status, EL status, race/ethnicity) data frame, allowing custom input output column names.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_demographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Demographic Variables — recode_demographics","text":"","code":"recode_demographics(   x,   sped_input_var = \"disability_status\",   sped_output_var = NULL,   el_input_var = \"el_overall_proficiency_level\",   el_output_var = NULL,   race_input_var = \"race\",   ethnicity_input_var = \"ethnicity\",   race_output_var = NULL )"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_demographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Demographic Variables — recode_demographics","text":"x data frame containing demographic variables recoded. result ingest_student_data_extract() sped_input_var Character. name column containing SPED status codes. Defaults \"disability_status\". sped_output_var Character (optional). name column store recoded SPED status. NULL (default), recoded values overwrite input column. el_input_var Character. name column containing EL proficiency level codes. Defaults \"el_overall_proficiency_level\". el_output_var Character (optional). name column store recoded EL status. NULL (default), recoded values overwrite input column. race_input_var Character. name column containing race codes. Defaults \"race\". ethnicity_input_var Character. name column containing ethnicity codes. Defaults \"ethnicity\". race_output_var Character (optional). name column store recoded race/ethnicity. NULL (default), recoded values overwrite input column.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_demographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Demographic Variables — recode_demographics","text":"data frame specified demographic variables recoded.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_demographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Demographic Variables — recode_demographics","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a data frame called 'student_data'  # Recode with default column names: student_data <- recode_demographics(student_data)  # Recode with custom output column names: student_data <- recode_demographics(     student_data,     sped_output_var = \"sped_status_text\",     el_output_var = \"el_status_text\",     race_output_var = \"race_ethnicity_text\" )  # Recode with different input column names: student_data <- recode_demographics(     student_data,     sped_input_var = \"special_ed_code\",     el_input_var = \"el_prof_level\",     race_input_var = \"race_code\",     ethnicity_input_var = \"hispanic_flag\",     sped_output_var = \"sped_status_text\",     el_output_var = \"el_status_text\",     race_output_var = \"race_ethnicity_text\" ) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_el_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode English Learner (EL) Status — recode_el_status","title":"Recode English Learner (EL) Status — recode_el_status","text":"Recodes variable representing English Learner (EL) proficiency level text categories indicating EL status.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_el_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode English Learner (EL) Status — recode_el_status","text":"","code":"recode_el_status(el_proficiency_lvl_var)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_el_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode English Learner (EL) Status — recode_el_status","text":"el_proficiency_lvl_var numeric vector representing EL proficiency level. NA values typically indicate students currently classified EL.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_el_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode English Learner (EL) Status — recode_el_status","text":"character vector \"EL\" \"Not_EL\" values.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_el_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode English Learner (EL) Status — recode_el_status","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a data frame called 'student_data' with an 'el_proficiency' column student_data <- student_data |>     dplyr::mutate(         el_status = recode_el_status(el_proficiency)     ) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_performance_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Performance Levels — recode_performance_levels","title":"Recode Performance Levels — recode_performance_levels","text":"Recode performance levels numeric codes text representations","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_performance_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Performance Levels — recode_performance_levels","text":"","code":"recode_performance_levels(x)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_performance_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Performance Levels — recode_performance_levels","text":"x Numeric vector performance level codes","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_performance_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Performance Levels — recode_performance_levels","text":"character vector performance levels","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_performance_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Performance Levels — recode_performance_levels","text":"","code":"if (FALSE) { # \\dontrun{ # ...ingest and clean data previously res <- my_sol_data |>     dplyr::mutate(text_performance_level = recode_performance_levels(performance_level)) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Race and Ethnicity Variables — recode_race_eth","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"Recodes race ethnicity variables standardized text categories.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"","code":"recode_race_eth(eth_var = NULL, race_var = NULL)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"eth_var character vector representing ethnicity \"Y\" indicates Hispanic ethnicity \"N\" indicates non-Hispanic ethnicity. race_var numeric vector representing race, numeric codes correspond VDOE's race codes.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"character vector recoded race/ethnicity values.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"function uses dplyr::case_when recode input variables. eth_var \"Y\", output \"Hispanic\". Otherwise, function checks race_var following codes: 1: \"American Indian/Alaska Native\" 2: \"Asian\" 3: \"Black\" 5: \"White\" 6: \"Hawaiian Pacific Islander\" 7 greater: \"Two Races\" none conditions met, function return NA.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_race_eth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Race and Ethnicity Variables — recode_race_eth","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a data frame called 'student_data' with 'ethnicity' and 'race' columns student_data <- student_data |>     dplyr::mutate(         race_ethnicity = recode_race_eth(ethnicity, race)     )  # Using different column names student_data <- student_data |>     dplyr::mutate(         race_ethnicity = recode_race_eth(hispanic_flag, race_code)     ) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_sped_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode SPED Status — recode_sped_status","title":"Recode SPED Status — recode_sped_status","text":"Recodes variable representing Special Education (SPED) status text categories.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_sped_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode SPED Status — recode_sped_status","text":"","code":"recode_sped_status(sped_var)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_sped_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode SPED Status — recode_sped_status","text":"sped_var numeric vector representing SPED status.  NA 15 typically indicates \"SPED\".","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_sped_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode SPED Status — recode_sped_status","text":"character vector \"Not_SPED\" \"SPED\" values.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/recode_sped_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode SPED Status — recode_sped_status","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a data frame called 'student_data' with a 'sped_status' column student_data <- student_data |>     dplyr::mutate(         sped_status_text = recode_sped_status(sped_status)     ) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/standardize_writing_extract_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Writing Extract Names — standardize_writing_extract_names","title":"Standardize Writing Extract Names — standardize_writing_extract_names","text":"Standardizes column names writing test data frame align structure non-writing test data frames. Specifically, renames performance_level_total_mc_tei_sp performance_level scaled_score_writing_total test_scaled_score.  ensures consistency analyzing writing non-writing assessment data.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/standardize_writing_extract_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Writing Extract Names — standardize_writing_extract_names","text":"","code":"standardize_writing_extract_names(x)"},{"path":"https://ccps-research-eval.github.io/soltools/reference/standardize_writing_extract_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Writing Extract Names — standardize_writing_extract_names","text":"x data frame containing writing test data, typically SOL student data extract. Ideally one created ingest_student_data_extract() writing_extract TRUE. include columns performance_level_total_mc_tei_sp scaled_score_writing_total.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/standardize_writing_extract_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Writing Extract Names — standardize_writing_extract_names","text":"data frame standardized column names: performance_level test_scaled_score.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/standardize_writing_extract_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Writing Extract Names — standardize_writing_extract_names","text":"","code":"if (FALSE) { # \\dontrun{ writing_data <- ingest_student_data_extract(\"path/to/data.csv\", writing_extract = TRUE) standardized_data <- standardize_writing_extract_names(writing_data) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_pass_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Pass Rates — summarize_pass_rates","title":"Summarize Pass Rates — summarize_pass_rates","text":"Calculate pass rates student data extract. function applies calculation rules described VDOE's annual pass rate calculation document. Retest rules implicitly applied data preprocessed via filter_test_performance().","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_pass_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Pass Rates — summarize_pass_rates","text":"","code":"summarize_pass_rates(   x,   group_vars = NULL,   drop_parent_requested = TRUE,   drop_failing_retests = TRUE )"},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_pass_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Pass Rates — summarize_pass_rates","text":"x dataframe containing data SOL student data extract. Ideally read via ingest_student_data_extract() preprocessed via filter_test_performance() group_vars NULL character vector specifying column names group data (e.g., \"school_name\", \"test_name\"). NULL (default), grouping occur. drop_parent_requested Logical. TRUE (default), drop tests parent requested. drop_failing_retests Logical. TRUE (default), exclude failing retests. See drop_failing_retests() details.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_pass_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Pass Rates — summarize_pass_rates","text":"summarized dataframe pass rates group","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_pass_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Pass Rates — summarize_pass_rates","text":"","code":"if (FALSE) { # \\dontrun{ x <- ingest_student_data_extract(\"path/to/data.csv\") x <- filter_test_performance(x, type = \"best\") pr <- summarize_pass_rates(x, group_vars = c(\"school_name\", \"test_name\")) } # }"},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_performance_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Performance Levels — summarize_performance_levels","title":"Summarize Performance Levels — summarize_performance_levels","text":"Summarizes distribution performance levels within groups student data extract. Calculates count percentage students performance level group.","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_performance_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Performance Levels — summarize_performance_levels","text":"","code":"summarize_performance_levels(   x,   group_vars = NULL,   drop_parent_requested = TRUE,   drop_failing_retests = TRUE,   convert_performance_levels = TRUE )"},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_performance_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Performance Levels — summarize_performance_levels","text":"x data frame containing student data, ideally ingest_student_data_extract(). group_vars NULL character vector specifying column names group data (e.g., \"school_name\", \"test_name\"). NULL (default), grouping occur. drop_parent_requested Logical. TRUE (default), exclude tests marked parent-requested. drop_failing_retests Logical. TRUE (default), exclude failing retests. See drop_failing_retests() details. convert_performance_levels Logical. TRUE (default), convert numeric performance level codes text labels using recode_performance_levels().","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_performance_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Performance Levels — summarize_performance_levels","text":"data frame summarizing performance levels.  includes grouping variables, performance_level (either numeric text), n_performance_level (count students level within group), n_total (total number students group), pct (percentage students level within group).","code":""},{"path":"https://ccps-research-eval.github.io/soltools/reference/summarize_performance_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Performance Levels — summarize_performance_levels","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage with a hypothetical 'student_data' data frame: summary_df <- summarize_performance_levels(     student_data,     group_vars = c(\"school_name\", \"test_name\") )  # Example with numeric performance levels: summary_df_numeric <- summarize_performance_levels(     student_data,     group_vars = \"school_name\",     convert_performance_levels = FALSE ) } # }"}]
